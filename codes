#include<stdio.h>
#include<conio.h>
int BinarySearch(int arr[],int start,int end,int key)
{
  if(start<=end)
  {
      int mid=(start+end)/2;
      if(key==arr[mid])
      return mid+1;
      if(key<arr[mid])
      return BinarySearch(arr,start,mid-1,key);
      else 
      return BinarySearch(arr,mid+1,end,key);
  }
  return -1;
}
int main()
{
    int arr[10],n,i,key;
    int result;
    printf("Enter elements in array");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("Enter element to search");
    scanf("%d",&key);
    result=BinarySearch(arr,0,n-1,key);
    if(result==-1)
    {
    	printf("Element not present in array");
	}
	else
	{
		printf("Element present at %d",result);
	}
	return 0;
}


#include<stdio.h>
void merge(int ar[],int mid,int low,int high)
{
	int i,j,k,b[100];
	i=low;
	j=mid+1;
	k=low;
	while(i<=mid && j<=high)
	{
		if(ar[i]<ar[j])
		{
		b[k]=ar[i];
		i++;
		k++;
	    }
	    else
	    {
		b[k]=ar[j];
		j++;
		k++;
	    }
	}
	while(i<=mid){
		b[k]=ar[i];
		k++;
		i++;
	}
	while(j<=high){
		b[k]=ar[j];
		k++;
		j++;
	}
	for(i=low;i<=high;i++)
	{
		ar[i]=b[i];
	}
}
void mergesort(int A[],int low,int high)
{
	int mid;
	if(low<high)
	{
		mid=(low+high)/2;
		mergesort(A,low,mid);
		mergesort(A,mid+1,high);
		merge(A,mid,low,high);
	}
}
int main()
{
	int ar[10]={9,-22,23,45,44,33,29};
	int n=7;
	int i;
	mergesort(ar,0,6);
	for(i=0;i<n;i++)
	{
		printf("%d\n",ar[i]);
	}
}











#include<stdio.h>
void swap(int *a,int *b){
	int t=*a;
	*a=*b;
	*b=t;
}
int partition(int array[],int low,int high)
{
	int pivot=array[high];
	int i=low-1;
	for(int j=low;j<high;j++)
	{
		if(array[i]<=pivot)
		{
			i++;
			swap(&array[i],&array[j]);
		}
	}
	swap(&array[i+1],&array[high]);
	return(i+1);
}
void quicksort(int array[],int low,int high)
{
	if(low<high)
	{
		int pi=partition(array,low,high);
		quicksort(array,low,pi-1);
		quicksort(array,pi+1,high);
	}
}
int main()
{
	int ar[10]={9,-22,23,45,44,33,29};
	int n=7;
	int i;
	quicksort(ar,0,6);
	for(i=0;i<n;i++)
	{
		printf("%d\n",ar[i]);
	}
	return 0;
}





#include <bits/stdc++.h>
using namespace std;

void lcsAlgo(char *S1, char *S2, int m, int n) {
  int LCS_table[m + 1][n + 1];


  // Building the mtrix in bottom-up way
  for (int i = 0; i <= m; i++) {
    for (int j = 0; j <= n; j++) {
      if (i == 0 || j == 0)
        LCS_table[i][j] = 0;
      else if (S1[i - 1] == S2[j - 1])
        LCS_table[i][j] = LCS_table[i - 1][j - 1] + 1;
      else
        LCS_table[i][j] = max(LCS_table[i - 1][j], LCS_table[i][j - 1]);
    }
  }

  int index = LCS_table[m][n];
  char lcsAlgo[index + 1];
  lcsAlgo[index] = '\0';

  int i = m, j = n;
  while (i > 0 && j > 0) {
    if (S1[i - 1] == S2[j - 1]) {
      lcsAlgo[index - 1] = S1[i - 1];
      i--;
      j--;
      index--;
    }

    else if (LCS_table[i - 1][j] > LCS_table[i][j - 1])
      i--;
    else
      j--;
  }
  
  // Printing the sub sequences
  cout << "S1 : " << S1 << "\nS2 : " << S2 << "\nLCS: " << lcsAlgo << "\n";
}

int main() {
  char S1[] = "mishujain";
  char S2[] = "jain";
  int m = strlen(S1);
  int n = strlen(S2);

  lcsAlgo(S1, S2, m, n);
}

#include<bits/stdc++.h>
using namespace std;
struct item{
    int value;
    int weight;
};
bool comp(item a,item b)
{
    double r1=(double)a.value/(double)a.weight;
    double r2=(double)b.value/(double)b.weight;
    return r1>r2;
}
void fracknapsack(int W,item arr[],int n)
{
    sort(arr,arr+n,comp);
    int curWeight=0;
    double finvalue=0.0;
    for(int i=0;i<n;i++)
    {
       if(curWeight+arr[i].weight<=W)
       {
         curWeight+=arr[i].weight;
         finvalue+=arr[i].value;
       }
       else{
           int remain=W-curWeight;
           //curWeight+=(arr[i].value/(double)arr[i].weight)*arr[i].weight;
           finvalue+=(arr[i].value/(double)arr[i].weight)*(double)remain;
           break;
       }
    }
    cout<<finvalue<<endl;
}
int main()
{
    int W;
    item arr[50];
    int n;
    cin>>W;
    cin>>n;
    for(int i=0;i<n;i++)
    {
    	cin>>arr[i].value;
	}
	for(int i=0;i<n;i++)
    {
    	cin>>arr[i].weight;
	}
    //cout<<"Enter no of values and weight";
    fracknapsack(W,arr,n);
    return 0;
}



<bits/stdc++.h>
using namespace std;
int max(int a,int b)
{
	return (a>b)?a:b;
}
int knapsack(int W,int wt[],int val[],int n)
{
	if(n==0 || W==0)
	return 0;
	if(wt[n-1]>W)
	return knapsack(W,wt,val,n-1);
	else
	return max(val[n-1]+knapsack(W-wt[n-1],wt,val,n-1),knapsack(W,wt,val,n-1));
}
int main()
{
	int val[]={60,100,120};
	int wt[]={10,20,30};
	int W=50;
	int n=sizeof(val)/sizeof(val[0]);
	cout<<knapsack(W,wt,val,n);
	return 0;
}


#include <stdio.h>
#define MAX 5
void depth_first_search(int adj[][MAX],int visited[],int start)
{
	 int stack[MAX];
int top=-1, i;
//printf("%c",start + 65);
visited[start] = 1;
stack[++top] = start;
while(top != -1)
{
 start = stack[top];
	 	 for(i = 0; i < MAX; i++)
 {
 	 if(adj[start][i] && visited[i] == 0)
 {
 stack[++top] = i;
printf("%c",i + 65);
visited[i] = 1;
break;
 }
 }
if(i == MAX)
 top--;
}
}
int main()
{
	 int adj[MAX][MAX];
	 int visited[MAX] = {0}, i, j;
printf("\n Enter the adjacency matrix: ");
	 for(i = 0; i < MAX; i++)
	 	 for(j = 0; j < MAX; j++)
 scanf("%d", &adj[i][j]);
printf("DFS Traversal: ");
	 depth_first_search(adj,visited,0);
printf("\n");
	 return 0;
}

include <stdio.h>
#define MAX 10
void breadth_first_search(int adj[][MAX],int visited[],int start)
{
	 int queue[MAX],rear = –1,front =– 1, i;
queue[++rear] = start;
visited[start] = 1;
while(rear != front)
{
 start = queue[++front];
 if(start == 4)
 printf("5\t");
 else
 printf("%c \t",start + 65);
	 	 for(i = 0; i < MAX; i++)
 {
	 	 	 if(adj[start][i] == 1 && visited[i] == 0)
 {
 queue[++rear] = i;
visited[i] = 1;
 }
 }
}
}
int main()
{
	 int visited[MAX] = {0};
	 int adj[MAX][MAX], i, j;
printf("\n Enter the adjacency matrix: ");
	 for(i = 0; i < MAX; i++)
	 	 for(j = 0; j < MAX; j++)
 scanf("%d", &adj[i][j]);
breadth_first_search(adj,visited,0);
	 return 0;
}




#include <stdio.h>
    #include <conio.h>
    #include <stdlib.h>
    int i,j,k,a,b,u,v,n,ne=1;
    int min,mincost=0,cost[9][9],parent[9];
    int find(int);
    int uni(int,int);
    void main()
    {
    	printf("\n\tImplementation of Kruskal's Algorithm\n");
    	printf("\nEnter the no. of vertices:");
    	scanf("%d",&n);
    	printf("\nEnter the cost adjacency matrix:\n");
    	for(i=1;i<=n;i++)
    	{
    	for(j=1;j<=n;j++)
    	{
    	scanf("%d",&cost[i][j]);
    	if(cost[i][j]==0)
    	cost[i][j]=999;
    	}
    	}
    	printf("The edges of Minimum Cost Spanning Tree are\n");
    	while(ne < n)
    	{
    	for(i=1,min=999;i<=n;i++)
    	{
    	for(j=1;j <= n;j++)
    	{
    	if(cost[i][j] < min)
    	{
    	min=cost[i][j];
    	a=u=i;
    	b=v=j;
    	}
    	}
    	}
    	u=find(u);
    	v=find(v);
    	if(uni(u,v))
    	{
    	printf("%d edge (%d,%d) =%d\n",ne++,a,b,min);
    	mincost +=min;
    	}
    	cost[a][b]=cost[b][a]=999;
    	}
    	printf("\n\tMinimum cost = %d\n",mincost);
    	getch();
    }
    int find(int i)
    {
    	while(parent[i])
    	i=parent[i];
    	return i;
    }
    int uni(int i,int j)
    {
    	if(i!=j)
    	{
    	parent[j]=i;
    	return 1;
    	}
    	return 0;
    }
    
    
    clude<stdio.h>
#include<stdlib.h>
 
#define infinity 9999
#define MAX 20
 
int G[MAX][MAX],spanning[MAX][MAX],n;
 
int prims();
 
int main()
{
int i,j,total_cost;
printf("Enter no. of vertices:");
scanf("%d",&n);
printf("\nEnter the adjacency matrix:\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
total_cost=prims();
printf("\nspanning tree matrix:\n");
for(i=0;i<n;i++)
{
printf("\n");
for(j=0;j<n;j++)
printf("%d\t",spanning[i][j]);
}
printf("\n\nTotal cost of spanning tree=%d",total_cost);
return 0;
}
 
int prims()
{
int cost[MAX][MAX];
int u,v,min_distance,distance[MAX],from[MAX];
int visited[MAX],no_of_edges,i,min_cost,j;
//create cost[][] matrix,spanning[][]
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{
if(G[i][j]==0)
cost[i][j]=infinity;
else
cost[i][j]=G[i][j];
spanning[i][j]=0;
}
//initialise visited[],distance[] and from[]
distance[0]=0;
visited[0]=1;
for(i=1;i<n;i++)
{
distance[i]=cost[0][i];
from[i]=0;
visited[i]=0;
}
min_cost=0; //cost of spanning tree
no_of_edges=n-1; //no. of edges to be added
while(no_of_edges>0)
{
//find the vertex at minimum distance from the tree
min_distance=infinity;
for(i=1;i<n;i++)
if(visited[i]==0&&distance[i]<min_distance)
{
v=i;
min_distance=distance[i];
}
u=from[v];
//insert the edge in spanning tree
spanning[u][v]=distance[v];
spanning[v][u]=distance[v];
no_of_edges--;
visited[v]=1;
//updated the distance[] array
for(i=1;i<n;i++)
if(visited[i]==0&&cost[i][v]<distance[i])
{
distance[i]=cost[i][v];
from[i]=v;
}
min_cost=min_cost+cost[u][v];
}
return(min_cost);
}
    
